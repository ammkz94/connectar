# Connectar Platform - Next.js Project Files

## 1. Package.json
```json
{
  "name": "connectar",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.0",
    "next": "14.0.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^4.12.0",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@types/node": "^20.10.5",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.0.4",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.4.0",
    "typescript": "^5.3.3"
  }
}
```

## 2. tsconfig.json
```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

## 3. next.config.ts
```typescript
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  reactStrictMode: true,
  i18n: {
    locales: ['en', 'ar'],
    defaultLocale: 'ar',
    localeDetection: false,
  },
}

export default nextConfig
```

## 4. tailwind.config.ts
```typescript
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        },
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
        },
      },
      fontFamily: {
        arabic: ['Noto Sans Arabic', 'sans-serif'],
        english: ['Inter', 'sans-serif'],
      },
    },
  },
  plugins: [],
}
export default config
```

## 5. .env.local
```env
NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
```

## 6. /src/app/globals.css
```css
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Noto+Sans+Arabic:wght@300;400;500;600;700;800&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
  }

  html {
    scroll-behavior: smooth;
  }

  body {
    @apply bg-white text-gray-900;
  }

  [dir="rtl"] {
    font-family: 'Noto Sans Arabic', sans-serif;
  }

  [dir="ltr"] {
    font-family: 'Inter', sans-serif;
  }
}

@layer components {
  .btn-primary {
    @apply bg-primary-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-primary-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;
  }

  .btn-secondary {
    @apply bg-secondary-100 text-secondary-900 px-6 py-3 rounded-lg font-semibold hover:bg-secondary-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-secondary-500 focus:ring-offset-2;
  }

  .input-field {
    @apply w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200;
  }

  .card {
    @apply bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300;
  }

  .gradient-bg {
    @apply bg-gradient-to-br from-primary-500 via-primary-600 to-primary-700;
  }

  .text-gradient {
    @apply bg-clip-text text-transparent bg-gradient-to-r from-primary-600 to-primary-800;
  }
}

@layer utilities {
  .animation-delay-200 {
    animation-delay: 200ms;
  }
  
  .animation-delay-400 {
    animation-delay: 400ms;
  }

  .rtl\:text-right:dir(rtl) {
    text-align: right;
  }

  .ltr\:text-left:dir(ltr) {
    text-align: left;
  }
}

/* Custom animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fadeIn {
  animation: fadeIn 0.6s ease-out forwards;
}

/* Scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  @apply bg-gray-100;
}

::-webkit-scrollbar-thumb {
  @apply bg-gray-400 rounded-full;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-gray-500;
}
```

## 7. /src/lib/supabaseClient.ts
```typescript
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Types for our database
export interface User {
  id: string
  email: string
  full_name: string
  user_type: 'entrepreneur' | 'investor' | 'partner' | 'agent'
  created_at: string
  updated_at: string
  profile_image?: string
  bio?: string
  location?: string
  phone?: string
}

export interface Project {
  id: string
  user_id: string
  title: string
  description: string
  category: string
  funding_goal?: number
  current_funding?: number
  status: 'draft' | 'active' | 'funded' | 'closed'
  created_at: string
  updated_at: string
}

export interface Investment {
  id: string
  investor_id: string
  project_id: string
  amount: number
  status: 'pending' | 'confirmed' | 'cancelled'
  created_at: string
}

// Helper functions for authentication
export const signUp = async (email: string, password: string, userData: Partial<User>) => {
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      data: userData
    }
  })
  return { data, error }
}

export const signIn = async (email: string, password: string) => {
  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password
  })
  return { data, error }
}

export const signOut = async () => {
  const { error } = await supabase.auth.signOut()
  return { error }
}

export const getCurrentUser = async () => {
  const { data: { user } } = await supabase.auth.getUser()
  return user
}

// Helper functions for database operations
export const getUserProfile = async (userId: string) => {
  const { data, error } = await supabase
    .from('users')
    .select('*')
    .eq('id', userId)
    .single()
  
  return { data, error }
}

export const getProjects = async (filters?: { user_id?: string; status?: string }) => {
  let query = supabase.from('projects').select('*')
  
  if (filters?.user_id) {
    query = query.eq('user_id', filters.user_id)
  }
  
  if (filters?.status) {
    query = query.eq('status', filters.status)
  }
  
  const { data, error } = await query.order('created_at', { ascending: false })
  return { data, error }
}

export const createProject = async (project: Omit<Project, 'id' | 'created_at' | 'updated_at'>) => {
  const { data, error } = await supabase
    .from('projects')
    .insert([project])
    .select()
    .single()
  
  return { data, error }
}

export const updateProject = async (projectId: string, updates: Partial<Project>) => {
  const { data, error } = await supabase
    .from('projects')
    .update(updates)
    .eq('id', projectId)
    .select()
    .single()
  
  return { data, error }
}
```

## 8. /src/lib/store.ts
```typescript
import { create } from 'zustand'
import { User } from './supabaseClient'

interface AppState {
  user: User | null
  locale: 'ar' | 'en'
  setUser: (user: User | null) => void
  setLocale: (locale: 'ar' | 'en') => void
}

export const useStore = create<AppState>((set) => ({
  user: null,
  locale: 'ar',
  setUser: (user) => set({ user }),
  setLocale: (locale) => set({ locale }),
}))
```

## 9. /src/lib/translations.ts
```typescript
export const translations = {
  ar: {
    common: {
      welcome: 'مرحباً',
      login: 'تسجيل الدخول',
      signup: 'إنشاء حساب',
      logout: 'تسجيل الخروج',
      dashboard: 'لوحة التحكم',
      home: 'الرئيسية',
      about: 'من نحن',
      contact: 'اتصل بنا',
      submit: 'إرسال',
      cancel: 'إلغاء',
      save: 'حفظ',
      edit: 'تعديل',
      delete: 'حذف',
      loading: 'جاري التحميل...',
      error: 'حدث خطأ',
      success: 'تمت العملية بنجاح',
    },
    home: {
      hero: {
        title: 'منصة Connectar',
        subtitle: 'الجسر الذي يربط بين رواد الأعمال والمستثمرين',
        description: 'نساعدك في العثور على الشريك المثالي لتحقيق أحلامك وتنمية أعمالك',
        cta: 'ابدأ الآن',
      },
      features: {
        title: 'لماذا Connectar؟',
        feature1: {
          title: 'شبكة واسعة',
          description: 'تواصل مع آلاف المستثمرين ورواد الأعمال',
        },
        feature2: {
          title: 'فرص حقيقية',
          description: 'اكتشف فرص استثمارية مدروسة ومربحة',
        },
        feature3: {
          title: 'دعم متكامل',
          description: 'احصل على الإرشاد والدعم في كل خطوة',
        },
        feature4: {
          title: 'أمان وثقة',
          description: 'نضمن لك بيئة آمنة وموثوقة للتعامل',
        },
      },
      userTypes: {
        title: 'انضم إلينا كـ',
        entrepreneur: {
          title: 'رائد أعمال',
          description: 'اعرض مشروعك واحصل على التمويل المناسب',
        },
        investor: {
          title: 'مستثمر',
          description: 'اكتشف الفرص الاستثمارية الواعدة',
        },
        partner: {
          title: 'شريك',
          description: 'ابحث عن شركاء لتوسيع أعمالك',
        },
        agent: {
          title: 'وسيط استثمار',
          description: 'اربط بين المستثمرين والمشاريع الناجحة',
        },
      },
    },
    auth: {
      login: {
        title: 'تسجيل الدخول',
        email: 'البريد الإلكتروني',
        password: 'كلمة المرور',
        rememberMe: 'تذكرني',
        forgotPassword: 'نسيت كلمة المرور؟',
        noAccount: 'ليس لديك حساب؟',
        loginButton: 'دخول',
      },
      signup: {
        title: 'إنشاء حساب جديد',
        fullName: 'الاسم الكامل',
        email: 'البريد الإلكتروني',
        password: 'كلمة المرور',
        confirmPassword: 'تأكيد كلمة المرور',
        userType: 'نوع المستخدم',
        phone: 'رقم الهاتف',
        location: 'الموقع',
        bio: 'نبذة مختصرة',
        terms: 'أوافق على الشروط والأحكام',
        haveAccount: 'لديك حساب بالفعل؟',
        signupButton: 'إنشاء حساب',
      },
    },
    dashboard: {
      entrepreneur: {
        title: 'لوحة تحكم رائد الأعمال',
        myProjects: 'مشاريعي',
        createProject: 'إنشاء مشروع جديد',
        investments: 'الاستثمارات',
        messages: 'الرسائل',
        stats: {
          totalProjects: 'إجمالي المشاريع',
          activeProjects: 'المشاريع النشطة',
          totalFunding: 'إجمالي التمويل',
          investors: 'المستثمرون',
        },
      },
      investor: {
        title: 'لوحة تحكم المستثمر',
        opportunities: 'الفرص الاستثمارية',
        myInvestments: 'استثماراتي',
        portfolio: 'المحفظة',
        analytics: 'التحليلات',
        stats: {
          totalInvested: 'إجمالي الاستثمار',
          activeInvestments: 'الاستثمارات النشطة',
          roi: 'العائد على الاستثمار',
          projects: 'المشاريع',
        },
      },
    },
    footer: {
      about: 'عن Connectar',
      aboutText: 'منصة رائدة تجمع بين رواد الأعمال والمستثمرين لبناء مستقبل أفضل',
      quickLinks: 'روابط سريعة',
      contact: 'تواصل معنا',
      email: 'info@connectar.com',
      phone: '+966 50 123 4567',
      address: 'الرياض، المملكة العربية السعودية',
      copyright: '© 2024 Connectar. جميع الحقوق محفوظة',
    },
  },
  en: {
    common: {
      welcome: 'Welcome',
      login: 'Login',
      signup: 'Sign Up',
      logout: 'Logout',
      dashboard: 'Dashboard',
      home: 'Home',
      about: 'About',
      contact: 'Contact',
      submit: 'Submit',
      cancel: 'Cancel',
      save: 'Save',
      edit: 'Edit',
      delete: 'Delete',
      loading: 'Loading...',
      error: 'An error occurred',
      success: 'Operation successful',
    },
    home: {
      hero: {
        title: 'Connectar Platform',
        subtitle: 'The Bridge Between Entrepreneurs and Investors',
        description: 'We help you find the perfect partner to achieve your dreams and grow your business',
        cta: 'Get Started',
      },
      features: {
        title: 'Why Connectar?',
        feature1: {
          title: 'Wide Network',
          description: 'Connect with thousands of investors and entrepreneurs',
        },
        feature2: {
          title: 'Real Opportunities',
          description: 'Discover well-studied and profitable investment opportunities',
        },
        feature3: {
          title: 'Complete Support',
          description: 'Get guidance and support at every step',
        },
        feature4: {
          title: 'Security & Trust',
          description: 'We guarantee a safe and reliable environment',
        },
      },
      userTypes: {
        title: 'Join us as',
        entrepreneur: {
          title: 'Entrepreneur',
          description: 'Present your project and get the right funding',
        },
        investor: {
          title: 'Investor',
          description: 'Discover promising investment opportunities',
        },
        partner: {
          title: 'Partner',
          description: 'Find partners to expand your business',
        },
        agent: {
          title: 'Investment Agent',
          description: 'Connect investors with successful projects',
        },
      },
    },
    auth: {
      login: {
        title: 'Login',
        email: 'Email',
        password: 'Password',
        rememberMe: 'Remember me',
        forgotPassword: 'Forgot password?',
        noAccount: "Don't have an account?",
        loginButton: 'Login',
      },
      signup: {
        title: 'Create New Account',
        fullName: 'Full Name',
        email: 'Email',
        password: 'Password',
        confirmPassword: 'Confirm Password',
        userType: 'User Type',
        phone: 'Phone Number',
        location: 'Location',
        bio: 'Brief Bio',
        terms: 'I agree to the terms and conditions',
        haveAccount: 'Already have an account?',
        signupButton: 'Sign Up',
      },
    },
    dashboard: {
      entrepreneur: {
        title: 'Entrepreneur Dashboard',
        myProjects: 'My Projects',
        createProject: 'Create New Project',
        investments: 'Investments',
        messages: 'Messages',
        stats: {
          totalProjects: 'Total Projects',
          activeProjects: 'Active Projects',
          totalFunding: 'Total Funding',
          investors: 'Investors',
        },
      },
      investor: {
        title: 'Investor Dashboard',
        opportunities: 'Investment Opportunities',
        myInvestments: 'My Investments',
        portfolio: 'Portfolio',
        analytics: 'Analytics',
        stats: {
          totalInvested: 'Total Invested',
          activeInvestments: 'Active Investments',
          roi: 'Return on Investment',
          projects: 'Projects',
        },
      },
    },
    footer: {
      about: 'About Connectar',
      aboutText: 'A leading platform that brings together entrepreneurs and investors to build a better future',
      quickLinks: 'Quick Links',
      contact: 'Contact Us',
      email: 'info@connectar.com',
      phone: '+966 50 123 4567',
      address: 'Riyadh, Saudi Arabia',
      copyright: '© 2024 Connectar. All rights reserved',
    },
  },
}

export const t = (locale: 'ar' | 'en', path: string): string => {
  const keys = path.split('.')
  let value: any = translations[locale]
  
  for (const key of keys) {
    value = value?.[key]
  }
  
  return value || path
}
```

## 10. /src/components/Navbar.tsx
```typescript
'use client'

import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { useState, useEffect } from 'react'
import { FiMenu, FiX, FiGlobe, FiLogOut, FiUser } from 'react-icons/fi'
import { useStore } from '@/lib/store'
import { t } from '@/lib/translations'
import { signOut, getCurrentUser } from '@/lib/supabaseClient'

export default function Navbar() {
  const [isOpen, setIsOpen] = useState(false)
  const [scrolled, setScrolled] = useState(false)
  const { user, locale, setLocale, setUser } = useStore()
  const router = useRouter()

  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 20)
    }
    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

  useEffect(() => {
    getCurrentUser().then((currentUser) => {
      if (currentUser) {
        setUser(currentUser as any)
      }
    })
  }, [setUser])

  const handleLogout = async () => {
    await signOut()
    setUser(null)
    router.push('/')
  }

  const toggleLocale = () => {
    const newLocale = locale === 'ar' ? 'en' : 'ar'
    setLocale(newLocale)
    document.documentElement.dir = newLocale === 'ar' ? 'rtl' : 'ltr'
    document.documentElement.lang = newLocale
  }

  return (
    <nav className={`fixed w-full top-0 z-50 transition-all duration-300 ${
      scrolled ? 'bg-white shadow-lg' : 'bg-transparent'
    }`}>
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <Link href="/" className="flex items-center">
            <span className={`text-2xl font-bold ${
              scrolled ? 'text-primary-600' : 'text-white'
            }`}>
              Connectar
            </span>
          </Link>

          {/* Desktop Menu */}
          <div className="hidden md:flex items-center space-x-8 rtl:space-x-reverse">
            <Link 
              href="/" 
              className={`hover:text-primary-500 transition-colors ${
                scrolled ? 'text-gray-700' : 'text-white'
              }`}
            >
              {t(locale, 'common.home')}
            </Link>
            <Link 
              href="/about" 
              className={`hover:text-primary-500 transition-colors ${
                scrolled ? 'text-gray-700' : 'text-white'
              }`}
            >
              {t(locale, 'common.about')}
            </Link>
            <Link 
              href="/contact" 
              className={`hover:text-primary-500 transition-colors ${
                scrolled ? 'text-gray-700' : 'text-white'
              }`}
            >
              {t(locale, 'common.contact')}
            </Link>

            {user ? (
              <>
                <Link 
                  href="/dashboard" 
                  className={`hover:text-primary-500 transition-colors ${
                    scrolled ? 'text-gray-700' : 'text-white'
                  }`}
                >
                  {t(locale, 'common.dashboard')}
                </Link>
                <button
                  onClick={handleLogout}
                  className={`flex items-center gap-2 hover:text-primary-500 transition-colors ${
                    scrolled ? 'text-gray-700' : 'text-white'
                  }`}
                >
                  <FiLogOut />
                  {t(locale, 'common.logout')}
                </button>
              </>
            ) : (
              <>
                <Link 
                  href="/login" 
                  className={`hover:text-primary-500 transition-colors ${
                    scrolled ? 'text-gray-700' : 'text-white'
                  }`}
                >
                  {t(locale, 'common.login')}
                </Link>
                <Link 
                  href="/signup" 
                  className="btn-primary py-2 px-4"
                >
                  {t(locale, 'common.signup')}
                </Link>
              </>
            )}

            {/* Language Toggle */}
            <button
              onClick={toggleLocale}
              className={`flex items-center gap-1 hover:text-primary-500 transition-colors ${
                scrolled ? 'text-gray-700' : 'text-white'
              }`}
            >
              <FiGlobe />
              <span>{locale === 'ar' ? 'EN' : 'ع'}</span>
            </button>
          </div>

          {/* Mobile Menu Button */}
          <button
            onClick={() => setIsOpen(!isOpen)}
            className={`md:hidden ${
              scrolled ? 'text-gray-700' : 'text-white'
            }`}
          >
            {isOpen ? <FiX size={24} /> : <FiMenu size={24} />}
          </button>
        </div>

        {/* Mobile Menu */}
        {isOpen && (
          <div className="md:hidden bg-white shadow-lg rounded-b-lg">
            <div className="px-2 pt-2 pb-3 space-y-1">
              <Link 
                href="/" 
                className="block px-3 py-2 text-gray-700 hover:text-primary-500 hover:bg-gray-50 rounded-lg"
                onClick={() => setIsOpen(false)}
              >
                {t(locale, 'common.home')}
              </Link>
              <Link 
                href="/about" 
                className="block px-3 py-2 text-gray-700 hover:text-primary-500 hover:bg-gray-50 rounded-lg"
                onClick={() => setIsOpen(false)}
              >
                {t(locale, 'common.about')}
              </Link>
              <Link 
                href="/contact" 
                className="block px-3 py-2 text-gray-700 hover:text-primary-500 hover:bg-gray-50 rounded-lg"
                onClick={() => setIsOpen(false)}
              >
                {t(locale, 'common.contact')}
              </Link>

              {user ? (
                <>
                  <Link 
                    href="/dashboard" 
                    className="block px-3 py-2 text-gray-700 hover:text-primary-500 hover:bg-gray-50 rounded-lg"
                    onClick={() => setIsOpen(false)}
                  >
                    {t(locale, 'common.login')}
                  </Link>
                  <Link 
                    href="/signup" 
                    className="block px-3 py-2 text-gray-700 hover:text-primary-500 hover:bg-gray-50 rounded-lg"
                    onClick={() => setIsOpen(false)}
                  >
                    {t(locale, 'common.signup')}
                  </Link>
                </>
              )}

              <button
                onClick={() => {
                  toggleLocale()
                  setIsOpen(false)
                }}
                className="flex items-center gap-2 px-3 py-2 text-gray-700 hover:text-primary-500 hover:bg-gray-50 rounded-lg w-full"
              >
                <FiGlobe />
                <span>{locale === 'ar' ? 'English' : 'العربية'}</span>
              </button>
            </div>
          </div>
        )}
      </div>
    </nav>
  )
}
```

## 11. /src/components/Footer.tsx
```typescript
'use client'

import Link from 'next/link'
import { FiMail, FiPhone, FiMapPin, FiFacebook, FiTwitter, FiLinkedin, FiInstagram } from 'react-icons/fi'
import { useStore } from '@/lib/store'
import { t } from '@/lib/translations'

export default function Footer() {
  const { locale } = useStore()

  return (
    <footer className="bg-gray-900 text-white">
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* About Section */}
          <div>
            <h3 className="text-2xl font-bold mb-4 text-primary-400">Connectar</h3>
            <p className="text-gray-300 mb-4">
              {t(locale, 'footer.aboutText')}
            </p>
            <div className="flex space-x-4 rtl:space-x-reverse">
              <a href="#" className="text-gray-400 hover:text-primary-400 transition-colors">
                <FiFacebook size={20} />
              </a>
              <a href="#" className="text-gray-400 hover:text-primary-400 transition-colors">
                <FiTwitter size={20} />
              </a>
              <a href="#" className="text-gray-400 hover:text-primary-400 transition-colors">
                <FiLinkedin size={20} />
              </a>
              <a href="#" className="text-gray-400 hover:text-primary-400 transition-colors">
                <FiInstagram size={20} />
              </a>
            </div>
          </div>

          {/* Quick Links */}
          <div>
            <h4 className="text-lg font-semibold mb-4">{t(locale, 'footer.quickLinks')}</h4>
            <ul className="space-y-2">
              <li>
                <Link href="/" className="text-gray-300 hover:text-primary-400 transition-colors">
                  {t(locale, 'common.home')}
                </Link>
              </li>
              <li>
                <Link href="/about" className="text-gray-300 hover:text-primary-400 transition-colors">
                  {t(locale, 'common.about')}
                </Link>
              </li>
              <li>
                <Link href="/contact" className="text-gray-300 hover:text-primary-400 transition-colors">
                  {t(locale, 'common.contact')}
                </Link>
              </li>
              <li>
                <Link href="/signup" className="text-gray-300 hover:text-primary-400 transition-colors">
                  {t(locale, 'common.signup')}
                </Link>
              </li>
            </ul>
          </div>

          {/* User Types */}
          <div>
            <h4 className="text-lg font-semibold mb-4">{t(locale, 'home.userTypes.title')}</h4>
            <ul className="space-y-2">
              <li>
                <Link href="/signup?type=entrepreneur" className="text-gray-300 hover:text-primary-400 transition-colors">
                  {t(locale, 'home.userTypes.entrepreneur.title')}
                </Link>
              </li>
              <li>
                <Link href="/signup?type=investor" className="text-gray-300 hover:text-primary-400 transition-colors">
                  {t(locale, 'home.userTypes.investor.title')}
                </Link>
              </li>
              <li>
                <Link href="/signup?type=partner" className="text-gray-300 hover:text-primary-400 transition-colors">
                  {t(locale, 'home.userTypes.partner.title')}
                </Link>
              </li>
              <li>
                <Link href="/signup?type=agent" className="text-gray-300 hover:text-primary-400 transition-colors">
                  {t(locale, 'home.userTypes.agent.title')}
                </Link>
              </li>
            </ul>
          </div>

          {/* Contact Info */}
          <div>
            <h4 className="text-lg font-semibold mb-4">{t(locale, 'footer.contact')}</h4>
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <FiMail className="text-primary-400 flex-shrink-0" />
                <span className="text-gray-300">{t(locale, 'footer.email')}</span>
              </div>
              <div className="flex items-center gap-3">
                <FiPhone className="text-primary-400 flex-shrink-0" />
                <span className="text-gray-300" dir="ltr">{t(locale, 'footer.phone')}</span>
              </div>
              <div className="flex items-center gap-3">
                <FiMapPin className="text-primary-400 flex-shrink-0" />
                <span className="text-gray-300">{t(locale, 'footer.address')}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Copyright */}
        <div className="border-t border-gray-800 mt-8 pt-8 text-center">
          <p className="text-gray-400">
            {t(locale, 'footer.copyright')}
          </p>
        </div>
      </div>
    </footer>
  )
}
```

## 12. /src/app/layout.tsx
```typescript
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Connectar - منصة ربط رواد الأعمال بالمستثمرين',
  description: 'منصة Connectar تربط بين رواد الأعمال والمستثمرين والشركاء ووكلاء الاستثمار لبناء مستقبل أفضل',
  keywords: 'رواد الأعمال، مستثمرين، شركاء، استثمار، تمويل، مشاريع',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="ar" dir="rtl">
      <body className={inter.className}>
        {children}
      </body>
    </html>
  )
}
```

## 13. /src/app/page.tsx
```typescript
'use client'

import { useEffect } from 'react'
import Link from 'next/link'
import Navbar from '@/components/Navbar'
import Footer from '@/components/Footer'
import { useStore } from '@/lib/store'
import { t } from '@/lib/translations'
import { FiTrendingUp, FiUsers, FiShield, FiAward } from 'react-icons/fi'

export default function Home() {
  const { locale } = useStore()

  useEffect(() => {
    document.documentElement.dir = locale === 'ar' ? 'rtl' : 'ltr'
    document.documentElement.lang = locale
  }, [locale])

  const features = [
    {
      icon: <FiUsers className="w-12 h-12 text-primary-600" />,
      title: t(locale, 'home.features.feature1.title'),
      description: t(locale, 'home.features.feature1.description'),
    },
    {
      icon: <FiTrendingUp className="w-12 h-12 text-primary-600" />,
      title: t(locale, 'home.features.feature2.title'),
      description: t(locale, 'home.features.feature2.description'),
    },
    {
      icon: <FiAward className="w-12 h-12 text-primary-600" />,
      title: t(locale, 'home.features.feature3.title'),
      description: t(locale, 'home.features.feature3.description'),
    },
    {
      icon: <FiShield className="w-12 h-12 text-primary-600" />,
      title: t(locale, 'home.features.feature4.title'),
      description: t(locale, 'home.features.feature4.description'),
    },
  ]

  const userTypes = [
    {
      type: 'entrepreneur',
      title: t(locale, 'home.userTypes.entrepreneur.title'),
      description: t(locale, 'home.userTypes.entrepreneur.description'),
      color: 'from-blue-500 to-blue-600',
    },
    {
      type: 'investor',
      title: t(locale, 'home.userTypes.investor.title'),
      description: t(locale, 'home.userTypes.investor.description'),
      color: 'from-green-500 to-green-600',
    },
    {
      type: 'partner',
      title: t(locale, 'home.userTypes.partner.title'),
      description: t(locale, 'home.userTypes.partner.description'),
      color: 'from-purple-500 to-purple-600',
    },
    {
      type: 'agent',
      title: t(locale, 'home.userTypes.agent.title'),
      description: t(locale, 'home.userTypes.agent.description'),
      color: 'from-orange-500 to-orange-600',
    },
  ]

  return (
    <main className="min-h-screen">
      <Navbar />

      {/* Hero Section */}
      <section className="relative h-screen flex items-center justify-center gradient-bg">
        <div className="absolute inset-0 bg-black/40"></div>
        <div className="container mx-auto px-4 text-center relative z-10">
          <h1 className="text-5xl md:text-7xl font-bold text-white mb-6 animate-fadeIn">
            {t(locale, 'home.hero.title')}
          </h1>
          <p className="text-xl md:text-2xl text-white/90 mb-4 animate-fadeIn animation-delay-200">
            {t(locale, 'home.hero.subtitle')}
          </p>
          <p className="text-lg text-white/80 mb-8 max-w-2xl mx-auto animate-fadeIn animation-delay-400">
            {t(locale, 'home.hero.description')}
          </p>
          <Link
            href="/signup"
            className="btn-primary text-lg px-8 py-4 inline-block animate-fadeIn animation-delay-400"
          >
            {t(locale, 'home.hero.cta')}
          </Link>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 bg-gray-50">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12 text-gradient">
            {t(locale, 'home.features.title')}
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {features.map((feature, index) => (
              <div
                key={index}
                className="card text-center hover:transform hover:-translate-y-2 transition-all duration-300"
              >
                <div className="flex justify-center mb-4">{feature.icon}</div>
                <h3 className="text-xl font-semibold mb-3">{feature.title}</h3>
                <p className="text-gray-600">{feature.description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* User Types Section */}
      <section className="py-20">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12">
            {t(locale, 'home.userTypes.title')}
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {userTypes.map((userType, index) => (
              <Link
                key={index}
                href={`/signup?type=${userType.type}`}
                className="group"
              >
                <div className={`card h-full bg-gradient-to-br ${userType.color} text-white group-hover:scale-105 transition-transform duration-300`}>
                  <h3 className="text-2xl font-bold mb-3">{userType.title}</h3>
                  <p className="text-white/90">{userType.description}</p>
                </div>
              </Link>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 gradient-bg">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-4xl font-bold text-white mb-6">
            {locale === 'ar' ? 'ابدأ رحلتك معنا اليوم' : 'Start Your Journey Today'}
          </h2>
          <p className="text-xl text-white/90 mb-8 max-w-2xl mx-auto">
            {locale === 'ar' 
              ? 'انضم إلى آلاف رواد الأعمال والمستثمرين الذين يبنون المستقبل معًا'
              : 'Join thousands of entrepreneurs and investors building the future together'
            }
          </p>
          <Link
            href="/signup"
            className="bg-white text-primary-600 px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-block"
          >
            {t(locale, 'common.signup')}
          </Link>
        </div>
      </section>

      <Footer />
    </main>
  )
}
```

## 14. /src/app/login/page.tsx
```typescript
'use client'

import { useState } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import Navbar from '@/components/Navbar'
import Footer from '@/components/Footer'
import { useStore } from '@/lib/store'
import { t } from '@/lib/translations'
import { signIn } from '@/lib/supabaseClient'
import { FiMail, FiLock, FiAlertCircle } from 'react-icons/fi'

export default function Login() {
  const { locale, setUser } = useStore()
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    rememberMe: false,
  })

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      const { data, error } = await signIn(formData.email, formData.password)
      
      if (error) throw error
      
      if (data.user) {
        setUser(data.user as any)
        router.push('/dashboard')
      }
    } catch (err: any) {
      setError(err.message || t(locale, 'common.error'))
    } finally {
      setLoading(false)
    }
  }

  return (
    <main className="min-h-screen flex flex-col">
      <Navbar />
      
      <div className="flex-1 flex items-center justify-center py-20 px-4 bg-gray-50">
        <div className="max-w-md w-full">
          <div className="card">
            <h2 className="text-3xl font-bold text-center mb-8">
              {t(locale, 'auth.login.title')}
            </h2>

            {error && (
              <div className="bg-red-50 text-red-600 p-4 rounded-lg mb-6 flex items-center gap-2">
                <FiAlertCircle />
                <span>{error}</span>
              </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-6">
              <div>
                <label className="block text-sm font-medium mb-2">
                  {t(locale, 'auth.login.email')}
                </label>
                <div className="relative">
                  <FiMail className="absolute top-3 left-3 rtl:right-3 rtl:left-auto text-gray-400" />
                  <input
                    type="email"
                    required
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    className="input-field pl-10 rtl:pr-10 rtl:pl-4"
                    placeholder={t(locale, 'auth.login.email')}
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  {t(locale, 'auth.login.password')}
                </label>
                <div className="relative">
                  <FiLock className="absolute top-3 left-3 rtl:right-3 rtl:left-auto text-gray-400" />
                  <input
                    type="password"
                    required
                    value={formData.password}
                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                    className="input-field pl-10 rtl:pr-10 rtl:pl-4"
                    placeholder={t(locale, 'auth.login.password')}
                  />
                </div>
              </div>

              <div className="flex items-center justify-between">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={formData.rememberMe}
                    onChange={(e) => setFormData({ ...formData, rememberMe: e.target.checked })}
                    className="mr-2 rtl:ml-2 rtl:mr-0"
                  />
                  <span className="text-sm">{t(locale, 'auth.login.rememberMe')}</span>
                </label>
                <Link href="/forgot-password" className="text-sm text-primary-600 hover:underline">
                  {t(locale, 'auth.login.forgotPassword')}
                </Link>
              </div>

              <button
                type="submit"
                disabled={loading}
                className="btn-primary w-full"
              >
                {loading ? t(locale, 'common.loading') : t(locale, 'auth.login.loginButton')}
              </button>
            </form>

            <div className="mt-6 text-center">
              <span className="text-gray-600">{t(locale, 'auth.login.noAccount')} </span>
              <Link href="/signup" className="text-primary-600 font-semibold hover:underline">
                {t(locale, 'common.signup')}
              </Link>
            </div>
          </div>
        </div>
      </div>

      <Footer />
    </main>
  )
}
```

## 15. /src/app/signup/page.tsx
```typescript
'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { useRouter, useSearchParams } from 'next/navigation'
import Navbar from '@/components/Navbar'
import Footer from '@/components/Footer'
import { useStore } from '@/lib/store'
import { t } from '@/lib/translations'
import { signUp } from '@/lib/supabaseClient'
import { FiMail, FiLock, FiUser, FiPhone, FiMapPin, FiAlertCircle } from 'react-icons/fi'

export default function SignUp() {
  const { locale } = useStore()
  const router = useRouter()
  const searchParams = useSearchParams()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    password: '',
    confirmPassword: '',
    userType: searchParams.get('type') || 'entrepreneur',
    phone: '',
    location: '',
    bio: '',
    terms: false,
  })

  const userTypes = [
    { value: 'entrepreneur', label: t(locale, 'home.userTypes.entrepreneur.title') },
    { value: 'investor', label: t(locale, 'home.userTypes.investor.title') },
    { value: 'partner', label: t(locale, 'home.userTypes.partner.title') },
    { value: 'agent', label: t(locale, 'home.userTypes.agent.title') },
  ]

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    // Validate passwords match
    if (formData.password !== formData.confirmPassword) {
      setError(locale === 'ar' ? 'كلمات المرور غير متطابقة' : 'Passwords do not match')
      setLoading(false)
      return
    }

    // Validate terms accepted
    if (!formData.terms) {
      setError(locale === 'ar' ? 'يجب الموافقة على الشروط والأحكام' : 'You must agree to the terms and conditions')
      setLoading(false)
      return
    }

    try {
      const { data, error } = await signUp(formData.email, formData.password, {
        full_name: formData.fullName,
        user_type: formData.userType as any,
        phone: formData.phone,
        location: formData.location,
        bio: formData.bio,
      })
      
      if (error) throw error
      
      if (data.user) {
        router.push('/login')
      }
    } catch (err: any) {
      setError(err.message || t(locale, 'common.error'))
    } finally {
      setLoading(false)
    }
  }

  return (
    <main className="min-h-screen flex flex-col">
      <Navbar />
      
      <div className="flex-1 flex items-center justify-center py-20 px-4 bg-gray-50">
        <div className="max-w-2xl w-full">
          <div className="card">
            <h2 className="text-3xl font-bold text-center mb-8">
              {t(locale, 'auth.signup.title')}
            </h2>

            {error && (
              <div className="bg-red-50 text-red-600 p-4 rounded-lg mb-6 flex items-center gap-2">
                <FiAlertCircle />
                <span>{error}</span>
              </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium mb-2">
                    {t(locale, 'auth.signup.fullName')}
                  </label>
                  <div className="relative">
                    <FiUser className="absolute top-3 left-3 rtl:right-3 rtl:left-auto text-gray-400" />
                    <input
                      type="text"
                      required
                      value={formData.fullName}
                      onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}
                      className="input-field pl-10 rtl:pr-10 rtl:pl-4"
                      placeholder={t(locale, 'auth.signup.fullName')}
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    {t(locale, 'auth.signup.email')}
                  </label>
                  <div className="relative">
                    <FiMail className="absolute top-3 left-3 rtl:right-3 rtl:left-auto text-gray-400" />
                    <input
                      type="email"
                      required
                      value={formData.email}
                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                      className="input-field pl-10 rtl:pr-10 rtl:pl-4"
                      placeholder={t(locale, 'auth.signup.email')}
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    {t(locale, 'auth.signup.password')}
                  </label>
                  <div className="relative">
                    <FiLock className="absolute top-3 left-3 rtl:right-3 rtl:left-auto text-gray-400" />
                    <input
                      type="password"
                      required
                      value={formData.password}
                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                      className="input-field pl-10 rtl:pr-10 rtl:pl-4"
                      placeholder={t(locale, 'auth.signup.password')}
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    {t(locale, 'auth.signup.confirmPassword')}
                  </label>
                  <div className="relative">
                    <FiLock className="absolute top-3 left-3 rtl:right-3 rtl:left-auto text-gray-400" />
                    <input
                      type="password"
                      required
                      value={formData.confirmPassword}
                      onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                      className="input-field pl-10 rtl:pr-10 rtl:pl-4"
                      placeholder={t(locale, 'auth.signup.confirmPassword')}
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    {t(locale, 'auth.signup.userType')}
                  </label>
                  <select
                    value={formData.userType}
                    onChange={(e) => setFormData({ ...formData, userType: e.target.value })}
                    className="input-field"
                  >
                    {userTypes.map((type) => (
                      <option key={type.value} value={type.value}>
                        {type.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    {t(locale, 'auth.signup.phone')}
                  </label>
                  <div className="relative">
                    <FiPhone className="absolute top-3 left-3 rtl:right-3 rtl:left-auto text-gray-400" />
                    <input
                      type="tel"
                      value={formData.phone}
                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                      className="input-field pl-10 rtl:pr-10 rtl:pl-4"
                      placeholder={t(locale, 'auth.signup.phone')}
                      dir="ltr"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    {t(locale, 'auth.signup.location')}
                  </label>
                  <div className="relative">
                    <FiMapPin className="absolute top-3 left-3 rtl:right-3 rtl:left-auto text-gray-400" />
                    <input
                      type="text"
                      value={formData.location}
                      onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                      className="input-field pl-10 rtl:pr-10 rtl:pl-4"
                      placeholder={t(locale, 'auth.signup.location')}
                    />
                  </div>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium mb-2">
                    {t(locale, 'auth.signup.bio')}
                  </label>
                  <textarea
                    value={formData.bio}
                    onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                    className="input-field"
                    rows={3}
                    placeholder={t(locale, 'auth.signup.bio')}
                  />
                </div>
              </div>

              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="terms"
                  checked={formData.terms}
                  onChange={(e) => setFormData({ ...formData, terms: e.target.checked })}
                  className="mr-2 rtl:ml-2 rtl:mr-0"
                />
                <label htmlFor="terms" className="text-sm">
                  {t(locale, 'auth.signup.terms')}
                </label>
              </div>

              <button
                type="submit"
                disabled={loading}
                className="btn-primary w-full"
              >
                {loading ? t(locale, 'common.loading') : t(locale, 'auth.signup.signupButton')}
              </button>
            </form>

            <div className="mt-6 text-center">
              <span className="text-gray-600">{t(locale, 'auth.signup.haveAccount')} </span>
              <Link href="/login" className="text-primary-600 font-semibold hover:underline">
                {t(locale, 'common.login')}
              </Link>
            </div>
          </div>
        </div>
      </div>

      <Footer />
    </main>
  )
}
```

## 16. /src/app/dashboard/page.tsx
```typescript
'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import Navbar from '@/components/Navbar'
import Footer from '@/components/Footer'
import EntrepreneurDashboard from '@/components/dashboard/EntrepreneurDashboard'
import InvestorDashboard from '@/components/dashboard/InvestorDashboard'
import PartnerDashboard from '@/components/dashboard/PartnerDashboard'
import AgentDashboard from '@/components/dashboard/AgentDashboard'
import { useStore } from '@/lib/store'
import { getCurrentUser, getUserProfile } from '@/lib/supabaseClient'
import { FiLoader } from 'react-icons/fi'

export default function Dashboard() {
  const { user, setUser } = useStore()
  const router = useRouter()
  const [loading, setLoading] = useState(true)
  const [userProfile, setUserProfile] = useState<any>(null)

  useEffect(() => {
    const loadUser = async () => {
      try {
        const currentUser = await getCurrentUser()
        if (!currentUser) {
          router.push('/login')
          return
        }

        setUser(currentUser as any)
        const { data: profile } = await getUserProfile(currentUser.id)
        setUserProfile(profile)
      } catch (error) {
        console.error('Error loading user:', error)
        router.push('/login')
      } finally {
        setLoading(false)
      }
    }

    loadUser()
  }, [router, setUser])

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <FiLoader className="animate-spin text-4xl text-primary-600" />
      </div>
    )
  }

  const renderDashboard = () => {
    switch (userProfile?.user_type) {
      case 'entrepreneur':
        return <EntrepreneurDashboard />
      case 'investor':
        return <InvestorDashboard />
      case 'partner':
        return <PartnerDashboard />
      case 'agent':
        return <AgentDashboard />
      default:
        return <EntrepreneurDashboard />
    }
  }

  return (
    <main className="min-h-screen flex flex-col">
      <Navbar />
      <div className="flex-1 pt-16">
        {renderDashboard()}
      </div>
      <Footer />
    </main>
  )
}
```

## 17. /src/components/dashboard/EntrepreneurDashboard.tsx
```typescript
'use client'

import { useState, useEffect } from 'react'
import { useStore } from '@/lib/store'
import { t } from '@/lib/translations'
import { getProjects, Project } from '@/lib/supabaseClient'
import { FiPlus, FiBriefcase, FiDollarSign, FiUsers, FiTrendingUp } from 'react-icons/fi'
import Link from 'next/link'

export default function EntrepreneurDashboard() {
  const { locale, user } = useStore()
  const [projects, setProjects] = useState<Project[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (user?.id) {
      loadProjects()
    }
  }, [user])

  const loadProjects = async () => {
    try {
      const { data } = await getProjects({ user_id: user?.id })
      if (data) setProjects(data)
    } catch (error) {
      console.error('Error loading projects:', error)
    } finally {
      setLoading(false)
    }
  }

  const stats = [
    {
      icon: <FiBriefcase className="text-blue-600" />,
      label: t(locale, 'dashboard.entrepreneur.stats.totalProjects'),
      value: projects.length,
      bgColor: 'bg-blue-100',
    },
    {
      icon: <FiTrendingUp className="text-green-600" />,
      label: t(locale, 'dashboard.entrepreneur.stats.activeProjects'),
      value: projects.filter(p => p.status === 'active').length,
      bgColor: 'bg-green-100',
    },
    {
      icon: <FiDollarSign className="text-purple-600" />,
      label: t(locale, 'dashboard.entrepreneur.stats.totalFunding'),
      value: `${projects.reduce((sum, p) => sum + (p.current_funding || 0), 0).toLocaleString()}`,
      bgColor: 'bg-purple-100',
    },
    {
      icon: <FiUsers className="text-orange-600" />,
      label: t(locale, 'dashboard.entrepreneur.stats.investors'),
      value: '0',
      bgColor: 'bg-orange-100',
    },
  ]

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">
        {t(locale, 'dashboard.entrepreneur.title')}
      </h1>

      {/* Stats Grid */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {stats.map((stat, index) => (
          <div key={index} className="card">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-600 text-sm">{stat.label}</p>
                <p className="text-2xl font-bold mt-1">{stat.value}</p>
              </div>
              <div className={`p-3 rounded-lg ${stat.bgColor}`}>
                {stat.icon}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Quick Actions */}
      <div className="grid md:grid-cols-3 gap-6 mb-8">
        <Link href="/projects/create" className="card hover:shadow-xl transition-shadow">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-primary-100 rounded-lg">
              <FiPlus className="text-primary-600 text-2xl" />
            </div>
            <div>
              <h3 className="font-semibold">{t(locale, 'dashboard.entrepreneur.createProject')}</h3>
              <p className="text-sm text-gray-600">
                {locale === 'ar' ? 'ابدأ مشروعًا جديدًا' : 'Start a new project'}
              </p>
            </div>
          </div>
        </Link>

        <Link href="/investments" className="card hover:shadow-xl transition-shadow">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-green-100 rounded-lg">
              <FiDollarSign className="text-green-600 text-2xl" />
            </div>
            <div>
              <h3 className="font-semibold">{t(locale, 'dashboard.entrepreneur.investments')}</h3>
              <p className="text-sm text-gray-600">
                {locale === 'ar' ? 'تتبع استثماراتك' : 'Track your investments'}
              </p>
            </div>
          </div>
        </Link>

        <Link href="/messages" className="card hover:shadow-xl transition-shadow">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-purple-100 rounded-lg">
              <FiUsers className="text-purple-600 text-2xl" />
            </div>
            <div>
              <h3 className="font-semibold">{t(locale, 'dashboard.entrepreneur.messages')}</h3>
              <p className="text-sm text-gray-600">
                {locale === 'ar' ? 'تواصل مع المستثمرين' : 'Connect with investors'}
              </p>
            </div>
          </div>
        </Link>
      </div>

      {/* Projects List */}
      <div className="card">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold">{t(locale, 'dashboard.entrepreneur.myProjects')}</h2>
          <Link href="/projects/create" className="btn-primary text-sm py-2 px-4">
            <FiPlus className="inline mr-2" />
            {locale === 'ar' ? 'مشروع جديد' : 'New Project'}
          </Link>
        </div>

        {loading ? (
          <div className="text-center py-8">
            <p className="text-gray-500">{t(locale, 'common.loading')}</p>
          </div>
        ) : projects.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-gray-500 mb-4">
              {locale === 'ar' ? 'لا توجد مشاريع بعد' : 'No projects yet'}
            </p>
            <Link href="/projects/create" className="btn-primary">
              {t(locale, 'dashboard.entrepreneur.createProject')}
            </Link>
          </div>
        ) : (
          <div className="space-y-4">
            {projects.map((project) => (
              <div key={project.id} className="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="font-semibold text-lg">{project.title}</h3>
                    <p className="text-gray-600 text-sm mt-1">{project.description}</p>
                    <div className="flex gap-4 mt-3 text-sm">
                      <span className="text-gray-500">
                        {locale === 'ar' ? 'الهدف:' : 'Goal:'} ${project.funding_goal?.toLocaleString() || 0}
                      </span>
                      <span className="text-gray-500">
                        {locale === 'ar' ? 'محقق:' : 'Raised:'} ${project.current_funding?.toLocaleString() || 0}
                      </span>
                    </div>
                  </div>
                  <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                    project.status === 'active' 
                      ? 'bg-green-100 text-green-800'
                      : project.status === 'funded'
                      ? 'bg-blue-100 text-blue-800'
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    {project.status}
                  </span>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}
```

## 18. /src/components/dashboard/InvestorDashboard.tsx
```typescript
'use client'

import { useState, useEffect } from 'react'
import { useStore } from '@/lib/store'
import { t } from '@/lib/translations'
import { getProjects, Project } from '@/lib/supabaseClient'
import { FiDollarSign, FiTrendingUp, FiBriefcase, FiPieChart, FiSearch } from 'react-icons/fi'
import Link from 'next/link'

export default function InvestorDashboard() {
  const { locale, user } = useStore()
  const [projects, setProjects] = useState<Project[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    loadProjects()
  }, [])

  const loadProjects = async () => {
    try {
      const { data } = await getProjects({ status: 'active' })
      if (data) setProjects(data)
    } catch (error) {
      console.error('Error loading projects:', error)
    } finally {
      setLoading(false)
    }
  }

  const stats = [
    {
      icon: <FiDollarSign className="text-green-600" />,
      label: t(locale, 'dashboard.investor.stats.totalInvested'),
      value: '$0',
      bgColor: 'bg-green-100',
    },
    {
      icon: <FiBriefcase className="text-blue-600" />,
      label: t(locale, 'dashboard.investor.stats.activeInvestments'),
      value: '0',
      bgColor: 'bg-blue-100',
    },
    {
      icon: <FiTrendingUp className="text-purple-600" />,
      label: t(locale, 'dashboard.investor.stats.roi'),
      value: '0%',
      bgColor: 'bg-purple-100',
    },
    {
      icon: <FiPieChart className="text-orange-600" />,
      label: t(locale, 'dashboard.investor.stats.projects'),
      value: projects.length,
      bgColor: 'bg-orange-100',
    },
  ]

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">
        {t(locale, 'dashboard.investor.title')}
      </h1>

      {/* Stats Grid */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {stats.map((stat, index) => (
          <div key={index} className="card">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-600 text-sm">{stat.label}</p>
                <p className="text-2xl font-bold mt-1">{stat.value}</p>
              </div>
              <div className={`p-3 rounded-lg ${stat.bgColor}`}>
                {stat.icon}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Quick Actions */}
      <div className="grid md:grid-cols-3 gap-6 mb-8">
        <Link href="/opportunities" className="card hover:shadow-xl transition-shadow">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-primary-100 rounded-lg">
              <FiSearch className="text-primary-600 text-2xl" />
            </div>
            <div>
              <h3 className="font-semibold">{t(locale, 'dashboard.investor.opportunities')}</h3>
              <p className="text-sm text-gray-600">
                {locale === 'ar' ? 'اكتشف فرص جديدة' : 'Discover new opportunities'}
              </p>
            </div>
          </div>
        </Link>

        <Link href="/portfolio" className="card hover:shadow-xl transition-shadow">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-green-100 rounded-lg">
              <FiBriefcase className="text-green-600 text-2xl" />
            </div>
            <div>
              <h3 className="font-semibold">{t(locale, 'dashboard.investor.portfolio')}</h3>
              <p className="text-sm text-gray-600">
                {locale === 'ar' ? 'إدارة محفظتك' : 'Manage your portfolio'}
              </p>
            </div>
          </div>
        </Link>

        <Link href="/analytics" className="card hover:shadow-xl transition-shadow">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-purple-100 rounded-lg">
              <FiPieChart className="text-purple-600 text-2xl" />
            </div>
            <div>
              <h3 className="font-semibold">{t(locale, 'dashboard.investor.analytics')}</h3>
              <p className="text-sm text-gray-600">
                {locale === 'ar' ? 'تحليل الأداء' : 'Performance analysis'}
              </p>
            </div>
          </div>
        </Link>
      </div>

      {/* Investment Opportunities */}
      <div className="card">
        <h2 className="text-xl font-semibold mb-6">{t(locale, 'dashboard.investor.opportunities')}</h2>

        {loading ? (
          <div className="text-center py-8">
            <p className="text-gray-500">{t(locale, 'common.loading')}</p>
          </div>
        ) : projects.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-gray-500">
              {locale === 'ar' ? 'لا توجد فرص متاحة حالياً' : 'No opportunities available'}
            </p>
          </div>
        ) : (
          <div className="grid md:grid-cols-2 gap-4">
            {projects.slice(0, 4).map((project) => (
              <div key={project.id} className="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
                <h3 className="font-semibold">{project.title}</h3>
                <p className="text-gray-600 text-sm mt-1 line-clamp-2">{project.description}</p>
                <div className="mt-3">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-500">
                      {locale === 'ar' ? 'الهدف' : 'Goal'}
                    </span>
                    <span className="font-medium">
                      ${project.funding_goal?.toLocaleString() || 0}
                    </span>
                  </div>
                  <div className="mt-2">
                    <div className="bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-primary-600 h-2 rounded-full"
                        style={{ 
                          width: `${Math.min(
                            ((project.current_funding || 0) / (project.funding_goal || 1)) * 100,
                            100
                          )}%` 
                        }}
                      />
                    </div>
                  </div>
                  <div className="flex justify-between items-center mt-3">
                    <span className="text-sm text-gray-500">
                      {Math.round(((project.current_funding || 0) / (project.funding_goal || 1)) * 100)}% 
                      {locale === 'ar' ? ' مكتمل' : ' funded'}
                    </span>
                    <Link 
                      href={`/projects/${project.id}`}
                      className="text-primary-600 text-sm font-medium hover:underline"
                    >
                      {locale === 'ar' ? 'عرض التفاصيل' : 'View Details'}
                    </Link>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}
```

## 19. /src/components/dashboard/PartnerDashboard.tsx
```typescript
'use client'

import { useStore } from '@/lib/store'
import { t } from '@/lib/translations'
import { FiUsers, FiHandshake, FiTarget, FiMessageSquare } from 'react-icons/fi'
import Link from 'next/link'

export default function PartnerDashboard() {
  const { locale } = useStore()

  const stats = [
    {
      icon: <FiHandshake className="text-blue-600" />,
      label: locale === 'ar' ? 'الشراكات النشطة' : 'Active Partnerships',
      value: '0',
      bgColor: 'bg-blue-100',
    },
    {
      icon: <FiUsers className="text-green-600" />,
      label: locale === 'ar' ? 'طلبات الشراكة' : 'Partnership Requests',
      value: '0',
      bgColor: 'bg-green-100',
    },
    {
      icon: <FiTarget className="text-purple-600" />,
      label: locale === 'ar' ? 'الفرص المتاحة' : 'Available Opportunities',
      value: '0',
      bgColor: 'bg-purple-100',
    },
    {
      icon: <FiMessageSquare className="text-orange-600" />,
      label: locale === 'ar' ? 'الرسائل' : 'Messages',
      value: '0',
      bgColor: 'bg-orange-100',
    },
  ]

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">
        {locale === 'ar' ? 'لوحة تحكم الشريك' : 'Partner Dashboard'}
      </h1>

      {/* Stats Grid */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {stats.map((stat, index) => (
          <div key={index} className="card">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-600 text-sm">{stat.label}</p>
                <p className="text-2xl font-bold mt-1">{stat.value}</p>
              </div>
              <div className={`p-3 rounded-lg ${stat.bgColor}`}>
                {stat.icon}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Quick Actions */}
      <div className="grid md:grid-cols-2 gap-6">
        <Link href="/partnerships/search" className="card hover:shadow-xl transition-shadow">
          <h3 className="font-semibold text-lg mb-2">
            {locale === 'ar' ? 'البحث عن شركاء' : 'Find Partners'}
          </h3>
          <p className="text-gray-600">
            {locale === 'ar' 
              ? 'اكتشف شركاء محتملين لتوسيع أعمالك'
              : 'Discover potential partners to expand your business'
            }
          </p>
        </Link>

        <Link href="/partnerships/my" className="card hover:shadow-xl transition-shadow">
          <h3 className="font-semibold text-lg mb-2">
            {locale === 'ar' ? 'إدارة الشراكات' : 'Manage Partnerships'}
          </h3>
          <p className="text-gray-600">
            {locale === 'ar' 
              ? 'تتبع وإدارة شراكاتك الحالية'
              : 'Track and manage your current partnerships'
            }
          </p>
        </Link>
      </div>
    </div>
  )
}
```

## 20. /src/components/dashboard/AgentDashboard.tsx
```typescript
'use client'

import { useStore } from '@/lib/store'
import { t } from '@/lib/translations'
import { FiLink, FiDollarSign, FiUsers, FiActivity } from 'react-icons/fi'
import Link from 'next/link'

export default function AgentDashboard() {
  const { locale } = useStore()

  const stats = [
    {
      icon: <FiLink className="text-blue-600" />,
      label: locale === 'ar' ? 'الصفقات المكتملة' : 'Completed Deals',
      value: '0',
      bgColor: 'bg-blue-100',
    },
    {
      icon: <FiDollarSign className="text-green-600" />,
      label: locale === 'ar' ? 'العمولات المكتسبة' : 'Commissions Earned',
      value: '$0',
      bgColor: 'bg-green-100',
    },
    {
      icon: <FiUsers className="text-purple-600" />,
      label: locale === 'ar' ? 'العملاء النشطون' : 'Active Clients',
      value: '0',
      bgColor: 'bg-purple-100',
    },
    {
      icon: <FiActivity className="text-orange-600" />,
      label: locale === 'ar' ? 'الصفقات الجارية' : 'Ongoing Deals',
      value: '0',
      bgColor: 'bg-orange-100',
    },
  ]

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">
        {locale === 'ar' ? 'لوحة تحكم وسيط الاستثمار' : 'Investment Agent Dashboard'}
      </h1>

      {/* Stats Grid */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {stats.map((stat, index) => (
          <div key={index} className="card">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-600 text-sm">{stat.label}</p>
                <p className="text-2xl font-bold mt-1">{stat.value}</p>
              </div>
              <div className={`p-3 rounded-lg ${stat.bgColor}`}>
                {stat.icon}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Quick Actions */}
      <div className="grid md:grid-cols-2 gap-6">
        <Link href="/deals/new" className="card hover:shadow-xl transition-shadow">
          <h3 className="font-semibold text-lg mb-2">
            {locale === 'ar' ? 'إنشاء صفقة جديدة' : 'Create New Deal'}
          </h3>
          <p className="text-gray-600">
            {locale === 'ar' 
              ? 'اربط بين المستثمرين والمشاريع الواعدة'
              : 'Connect investors with promising projects'
            }
          </p>
        </Link>

        <Link href="/clients" className="card hover:shadow-xl transition-shadow">
          <h3 className="font-semibold text-lg mb-2">
            {locale === 'ar' ? 'إدارة العملاء' : 'Manage Clients'}
          </h3>
          <p className="text-gray-600">
            {locale === 'ar' 
              ? 'تتبع وإدارة قاعدة عملائك'
              : 'Track and manage your client base'
            }
          </p>
        </Link>
      </div>
    </div>
  )
}
```

## 21. /public/favicon.ico
```
[يمكنك استخدام أي أيقونة favicon.ico مناسبة لمشروعك]
```

## 22. postcss.config.js
```javascript
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

## 23. .gitignore
```
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
```

## 24. README.md
```markdown
# Connectar Platform

منصة Connectar - منصة تربط بين رواد الأعمال والمستثمرين والشركاء ووكلاء الاستثمار.

## المميزات

- 🌐 دعم كامل للغتين العربية والإنجليزية
- 👥 أنواع مستخدمين متعددة (رائد أعمال، مستثمر، شريك، وسيط)
- 🎨 تصميم حديث ومتجاوب باستخدام Tailwind CSS
- 🔐 نظام مصادقة آمن مع Supabase
- 📊 لوحات تحكم مخصصة لكل نوع مستخدم
- 💼 إدارة المشاريع والاستثمارات

## التقنيات المستخدمة

- **Next.js 14** - إطار عمل React
- **TypeScript** - للكتابة الآمنة للأنواع
- **Tailwind CSS** - للتصميم
- **Supabase** - لقاعدة البيانات والمصادقة
- **Zustand** - لإدارة الحالة
- **React Icons** - للأيقونات

## البدء السريع

1. **استنساخ المشروع**
   ```bash
   git clone [your-repository-url]
   cd connectar
   ```

2. **تثبيت المكتبات**
   ```bash
   npm install
   # أو
   yarn install
   ```

3. **إعداد متغيرات البيئة**
   - أنشئ ملف `.env.local` في جذر المشروع
   - أضف مفاتيح Supabase:
   ```env
   NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url
   NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
   ```

4. **إعداد قاعدة البيانات في Supabase**
   
   قم بإنشاء الجداول التالية في Supabase:

   **جدول users:**
   ```sql
   CREATE TABLE users (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     email VARCHAR(255) UNIQUE NOT NULL,
     full_name VARCHAR(255) NOT NULL,
     user_type VARCHAR(50) CHECK (user_type IN ('entrepreneur', 'investor', 'partner', 'agent')),
     profile_image TEXT,
     bio TEXT,
     location VARCHAR(255),
     phone VARCHAR(20),
     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
     updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   );
   ```

   **جدول projects:**
   ```sql
   CREATE TABLE projects (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     user_id UUID REFERENCES users(id) ON DELETE CASCADE,
     title VARCHAR(255) NOT NULL,
     description TEXT NOT NULL,
     category VARCHAR(100),
     funding_goal DECIMAL(15,2),
     current_funding DECIMAL(15,2) DEFAULT 0,
     status VARCHAR(50) CHECK (status IN ('draft', 'active', 'funded', 'closed')) DEFAULT 'draft',
     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
     updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   );
   ```

   **جدول investments:**
   ```sql
   CREATE TABLE investments (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     investor_id UUID REFERENCES users(id) ON DELETE CASCADE,
     project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
     amount DECIMAL(15,2) NOT NULL,
     status VARCHAR(50) CHECK (status IN ('pending', 'confirmed', 'cancelled')) DEFAULT 'pending',
     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
   );
   ```

5. **تشغيل المشروع**
   ```bash
   npm run dev
   # أو
   yarn dev
   ```

   افتح المتصفح على [http://localhost:3000](http://localhost:3000)

## هيكل المشروع

```
connectar/
├── src/
│   ├── app/                 # صفحات التطبيق
│   │   ├── page.tsx        # الصفحة الرئيسية
│   │   ├── login/          # صفحة تسجيل الدخول
│   │   ├── signup/         # صفحة التسجيل
│   │   └── dashboard/      # لوحة التحكم
│   ├── components/         # المكونات
│   │   ├── Navbar.tsx     # شريط التنقل
│   │   ├── Footer.tsx     # التذييل
│   │   └── dashboard/     # مكونات لوحة التحكم
│   └── lib/               # المكتبات والأدوات
│       ├── supabaseClient.ts  # عميل Supabase
│       ├── store.ts          # إدارة الحالة
│       └── translations.ts   # الترجمات
├── public/                # الملفات الثابتة
├── .env.local            # متغيرات البيئة
└── package.json          # معلومات المشروع

```

## الميزات القادمة

- [ ] نظام المراسلة بين المستخدمين
- [ ] نظام التقييمات والمراجعات
- [ ] لوحة تحليلات متقدمة
- [ ] نظام الإشعارات
- [ ] التكامل مع وسائل الدفع
- [ ] نظام البحث والتصفية المتقدم

## المساهمة

نرحب بالمساهمات! يرجى قراءة دليل المساهمة قبل إرسال أي Pull Request.

## الترخيص

هذا المشروع مرخص تحت رخصة MIT.

## الدعم

للحصول على الدعم، يرجى التواصل عبر:
- البريد الإلكتروني: info@connectar.com
- الموقع: https://connectar.com

---

صنع بـ ❤️ بواسطة فريق Connectar
```IsOpen(false)}
                  >
                    {t(locale, 'common.dashboard')}
                  </Link>
                  <button
                    onClick={() => {
                      handleLogout()
                      setIsOpen(false)
                    }}
                    className="block w-full text-left px-3 py-2 text-gray-700 hover:text-primary-500 hover:bg-gray-50 rounded-lg"
                  >
                    {t(locale, 'common.logout')}
                  </button>
                </>
              ) : (
                <>
                  <Link 
                    href="/login" 
                    className="block px-3 py-2 text-gray-700 hover:text-primary-500 hover:bg-gray-50 rounded-lg"
                    onClick={() => set